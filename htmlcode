<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8">
  <title>Simula√ß√£o de Prote√ß√£o de Dados</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Estilos CSS -->
  <style>
    /* Reset b√°sico */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f9;
      color: #333;
      display: flex;
      height: 100vh;
      flex-direction: row;
      overflow: hidden;
    }

    /* Sidebar Esquerda - Tabela do Servidor */
    .sidebar-left {
      flex: 0 0 25%;
      /* Aumentado para 25% para mais espa√ßo */
      background-color: #ffffff;
      border-right: 1px solid #ddd;
      padding: 20px;
      display: flex;
      flex-direction: column;
      gap: 10px;
      overflow: hidden;
      /* Evita rolagem desnecess√°ria */
    }

    .sidebar-left h3 {
      color: #333;
      margin-bottom: 10px;
      position: relative;
    }

    .sidebar-left .help-btn {
      position: absolute;
      top: 0;
      right: 0;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1em;
      color: #2196F3;
    }

    #server-table {
      width: 100%;
      border-collapse: collapse;
      white-space: nowrap;
      /* Evita quebra de linha nas c√©lulas */
    }

    #server-table th,
    #server-table td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: center;
    }

    #server-table th {
      background-color: #f2f2f2;
      color: #333;
    }

    /* Torna a tabela rol√°vel verticalmente */
    .table-container {
      flex-grow: 1;
      overflow: auto;
      max-height: 100%;
      /* Garante que a tabela ocupe todo o espa√ßo dispon√≠vel */
    }

    /* Main Content - Tutorial e Log */
    .main-content {
      flex: 1;
      /* Ocupa o espa√ßo restante */
      padding: 20px;
      display: flex;
      flex-direction: column;
      gap: 20px;
      height: auto;
      /* Permite ajuste conforme conte√∫do */
      overflow-y: auto;
    }

    h1 {
      color: #444;
      text-align: center;
      margin-bottom: 20px;
      position: relative;
    }

    .main-content .help-btn {
      position: absolute;
      top: 0;
      right: 20px;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1.2em;
      color: #2196F3;
    }

    /* Diagrama de Fluxo de Dados */
    .flowchart {
      width: 100%;
      text-align: center;
      position: relative;
      margin-bottom: 10px;
      /* Espa√ßo entre o diagrama e as sess√µes */
      flex-shrink: 0;
      /* Evita que o diagrama encolha */
      height: 200px; /* Altura inicial */
    }

    .flowchart svg {
      width: 100%;
      height: 100%;
      /* Altura ajustada para ser responsiva */
    }

    .flowchart text {
      font-size: 18px;
      /* Aumentado o tamanho da fonte */
    }

    /* Horizontal Divider para Redimensionamento do Diagrama */
    .horizontal-divider {
      height: 5px;
      background-color: #ddd;
      cursor: ns-resize;
      position: relative;
      width: 100%;
    }

    /* Container para as Etapas do Tutorial */
    .steps-container {
      flex: 1;
      /* Ocupa todo o espa√ßo vertical restante */
      display: flex;
      flex-direction: column;
      gap: 20px;
      overflow-y: auto;
      /* Permite rolagem interna se necess√°rio */
    }

    /* Etapas do Tutorial */
    .step {
      display: none;
      padding: 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      position: relative;
    }

    .step.active {
      display: block;
      animation: fadeIn 0.5s;
    }

    .step h2 {
      color: #333;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .step p {
      margin-bottom: 15px;
    }

    .step form {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .step label {
      font-weight: bold;
      margin-bottom: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .step .form-group {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
    }

    .step .form-group .input-column {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 10px;
      position: relative;
    }

    /* Posicionamento dos bot√µes de ajuda na mesma linha dos labels, alinhados √† direita */
    .step .form-group .input-column .help-btn {
      position: static;
      margin-right: 10px;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1em;
      color: #2196F3;
    }

    .step input {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 1em;
      transition: border-color 0.3s;
      width: 100%;
    }

    .step select {
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 1em;
      transition: border-color 0.3s;
      width: 100%;
    }

    .step input:focus,
    .step select:focus {
      border-color: #2196F3;
      outline: none;
    }

    .step button.action-btn {
      padding: 10px;
      font-size: 1em;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      background-color: #4CAF50;
      color: white;
      transition: background-color 0.3s;
    }

    .step button.action-btn:hover {
      background-color: #45a049;
    }

    .navigation-buttons {
      display: flex;
      justify-content: space-between;
      gap: 10px;
      margin-top: 20px;
    }

    .navigation-buttons button {
      padding: 10px 20px;
      font-size: 1em;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
      flex: 1;
      max-width: 150px;
    }

    .navigation-buttons .next-btn {
      background-color: #4CAF50;
      color: white;
    }

    .navigation-buttons .next-btn:hover {
      background-color: #45a049;
    }

    .navigation-buttons .prev-btn {
      background-color: #f1f1f1;
      color: #333;
    }

    .navigation-buttons .prev-btn:hover {
      background-color: #ddd;
    }

    /* Bot√£o para parar rotatividade estilizado e posicionado √† esquerda */
    .navigation-buttons .stop-rotation-btn {
      background-color: #f44336;
      color: white;
      border-radius: 5px;
      /* Mesmo formato dos demais bot√µes */
      padding: 10px 20px;
      font-size: 1em;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
      flex: 1;
      max-width: 150px;
    }

    .navigation-buttons .stop-rotation-btn:hover {
      background-color: #da190b;
    }

    .navigation-buttons .stop-rotation-btn::before {
      /*content: 'üö´';*/
      /* √çcone de parada */
      /*font-size: 1.2em;*/
    }

    /* Log */
    .log-container {
      background-color: #fff;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      height: 200px;
      /* Mantido conforme solicitado */
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .log-container h3 {
      color: #333;
      margin-bottom: 10px;
    }

    .log-container button.action-btn {
      align-self: flex-end;
      padding: 10px 20px;
      font-size: 1em;
      background-color: #f44336;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      color: white;
      transition: background-color 0.3s;
    }

    .log-container button.action-btn:hover {
      background-color: #da190b;
    }

    #log {
      flex-grow: 1;
      overflow-y: auto;
      background-color: #f9f9f9;
      padding: 10px;
      border-radius: 5px;
      border: 1px solid #ddd;
    }

    #log p {
      margin: 5px 0;
    }

    /* Sidebar Direita - Usu√°rios Logados */
    .sidebar-right {
      flex: 0 0 25%;
      /* Aumentado para 25% para mais espa√ßo */
      background-color: #fff;
      border-left: 1px solid #ddd;
      padding: 20px;
      display: flex;
      flex-direction: column;
      gap: 10px;
      overflow: hidden;
      /* Evita rolagem desnecess√°ria */
    }

    .sidebar-right h3 {
      color: #333;
      margin-bottom: 10px;
      position: relative;
    }

    .sidebar-right .help-btn {
      position: absolute;
      top: 0;
      right: 0;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1em;
      color: #2196F3;
    }

    #logged-users {
      flex-grow: 1;
      /* Ocupa todo o espa√ßo vertical dispon√≠vel */
      background-color: #fff;
      padding: 10px;
      /*border: 1px solid #ccc;
      border-radius: 5px;*/
      overflow: auto;
      /* Permite rolagem interna quando necess√°rio */
    }

    /* Estilos para blocos de usu√°rios logados */
    .user-block {
      background-color: #f2f2f2;
      border-radius: 8px;
      padding: 10px;
      margin-bottom: 10px;
      display: flex;
      flex-direction: column;
      gap: 5px;
      position: relative;
    }

    /* Classes de cores diferentes para os blocos de usu√°rios */
    /*.color-1 {
      background-color: #f2f2f2; /* Cinza Azul */
    }*/

    /*.color-2 {
      background-color: #f2f2f2; /* Verde Claro */
    }*/

    /*.color-3 {
      background-color: #f2f2f2; /* Laranja Claro */
    }*/

    /*.color-4 {
      background-color: #f2f2f2; /* Roxo Claro */
    }*/

    /* Posicionar a bolinha √† direita */
.status-indicator {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: inline-block;
  margin-left: 95%; /* Espa√ßo √† esquerda da bolinha */
  /* Remover posicionamento absoluto */
  position: static;
  transform: none;
}


    .status-logged-in {
      background-color: #4CAF50;
    }

    .status-logged-out {
      background-color: #f44336;
    }

    /* Estilos para blocos de usu√°rios logados */
.user-block {
  background-color: #f2f2f2; /* Cinza do cabe√ßalho da tabela */
  border-radius: 8px;
  padding: 10px;
  margin-bottom: 10px;
  display: flex;
  flex-direction: column;
  gap: 5px;
}

/* Container para alinhar nome do usu√°rio e status horizontalmente */
.user-block .user-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 5px; /* Espa√ßamento abaixo do header */
}

/* Container para alinhar "Expira em:" e o tempo horizontalmente */
.user-block .expires {
  display: flex;
  align-items: center;
  margin-bottom: 5px; /* Espa√ßamento abaixo */
}

/* Espa√ßamento entre "Expira em:" e o tempo */
.user-block .expires strong {
  margin-right: 5px; /* Espa√ßo entre o texto e o contador */
}

/* Estilos para o temporizador */
.user-block .expires .timer {
  font-size: 0.9em;
  color: #555;
  word-wrap: break-word;
}

/* Ajuste da bolinha de status */
.status-indicator {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: inline-block;
  margin-left: 0; /* Removido margin-left: 95% */
  position: static;
  transform: none;
}

/* Cores para status logado e deslogado */
.status-logged-in {
  background-color: #4CAF50; /* Verde */
}

.status-logged-out {
  background-color: #f44336; /* Vermelho */
}

/* Ajustar display de strong dentro de user-block */
.user-block strong {
  display: block;
  margin-bottom: 5px;
}

/* Bot√£o de logout que ocupa toda a largura */
.user-block button.action-btn {
  width: 100%;
  padding: 8px;
  font-size: 0.9em;
  background-color: #f44336;
  border: none;
  border-radius: 5px;
  color: white;
  cursor: pointer;
  transition: background-color 0.3s;
  margin-top: 10px;
}

.user-block button.action-btn:hover {
  background-color: #da190b;
}

    /* Estilos para textos dentro dos blocos */
    .user-block strong {
      display: block;
      margin-bottom: 5px;
    }

    /* Bot√£o de logout que ocupa toda a largura */
    .user-block button.action-btn {
      width: 100%;
      padding: 8px;
      font-size: 0.9em;
      background-color: #f44336;
      border: none;
      border-radius: 5px;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s;
      margin-top: 10px;
    }

    .user-block button.action-btn:hover {
      background-color: #da190b;
    }

    /* Bot√µes de Navega√ß√£o Flutuantes com √çcones */
    .floating-nav {
      position: fixed;
      top: 50%;
      right: 20px;
      transform: translateY(-50%);
      display: flex;
      flex-direction: column;
      gap: 15px;
      z-index: 1000;
    }

    .floating-nav button {
      background-color: #2196F3;
      border: none;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      color: white;
      font-size: 24px;
      cursor: pointer;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transition: background-color 0.3s, transform 0.3s;
      position: relative;
    }

    .floating-nav button:hover {
      background-color: #1976D2;
      transform: scale(1.1);
    }

    .floating-nav button.tooltip {
      position: relative;
    }

    .floating-nav button.tooltip::after {
      content: attr(data-tooltip);
      position: absolute;
      right: 60px;
      top: 50%;
      transform: translateY(-50%);
      background-color: #333;
      color: #fff;
      padding: 5px 10px;
      border-radius: 4px;
      opacity: 0;
      white-space: nowrap;
      pointer-events: none;
      transition: opacity 0.3s;
      font-size: 0.9em;
    }

    .floating-nav button.tooltip:hover::after {
      opacity: 1;
    }

    /* Notifica√ß√µes Pop-up */
    .notification {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: #4CAF50;
      color: white;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      opacity: 0;
      transition: opacity 0.5s ease-in-out;
      z-index: 1000;
      max-width: 300px;
      word-wrap: break-word;
    }

    .notification.show {
      opacity: 1;
    }

    .notification.error {
      background-color: #f44336;
    }

    .notification.info {
      background-color: #2196F3;
    }

    /* Anima√ß√µes */
    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    @keyframes fadeOut {
      from {
        opacity: 1;
      }

      to {
        opacity: 0;
      }
    }

    @keyframes fadeInOverlay {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    @keyframes fadeOutOverlay {
      from {
        opacity: 1;
        backdrop-filter: blur(5px);
      }

      to {
        opacity: 0;
        backdrop-filter: blur(0);
      }
    }

    @keyframes fadeInModal {
      from {
        transform: scale(0.8);
        opacity: 0;
      }

      to {
        transform: scale(1);
        opacity: 1;
      }
    }

    @keyframes fadeOutModal {
      from {
        transform: scale(1);
        opacity: 1;
      }

      to {
        transform: scale(0.8);
        opacity: 0;
      }
    }

    .highlight {
      stroke: #FF5722;
      stroke-width: 4;
      fill: none;
      transition: stroke 0.3s, stroke-width 0.3s;
    }

    /* Responsividade */
    @media (max-width: 1200px) {
      body {
        flex-direction: column;
      }

      .sidebar-left,
      .sidebar-right,
      .main-content {
        flex: 0 0 auto;
        width: 100%;
        height: auto;
      }

      .flowchart {
        height: 150px;
      }

      .sidebar-left,
      .sidebar-right {
        flex: 0 0 30%;
        /* Ajuste para dispositivos intermedi√°rios */
      }

      .step .form-group {
        flex-direction: column;
      }
    }

    @media (max-width: 768px) {
      .flowchart {
        height: 100px;
      }

      /* Campos de entrada ocupando toda a largura */
      .step input {
        padding: 15px;
        font-size: 1em;
      }

      /* Navega√ß√£o em coluna */
      .navigation-buttons {
        flex-direction: column;
        align-items: stretch;
      }

      .navigation-buttons button {
        width: 100%;
      }

      .sidebar-right button.action-btn {
        width: 100%;
        margin-left: 0;
      }

      /* Bot√µes de navega√ß√£o espa√ßados */
      .navigation-buttons {
        gap: 10px;
      }

      /* Ajuste das sidebars para dispositivos m√≥veis */
      .sidebar-left,
      .sidebar-right {
        flex: 0 0 40%;
        /* Mais espa√ßo para sidebars */
      }

      /* Ajustar bot√µes flutuantes para dispositivos m√≥veis */
      .floating-nav {
        right: 10px;
      }

      .floating-nav button {
        width: 40px;
        height: 40px;
        font-size: 20px;
      }

      .step .form-group {
        flex-direction: column;
        gap: 15px;
      }
    }

    /* Estilos para a Janela Modal */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(5px);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 2000;
      transition: opacity 0.3s ease-in-out, backdrop-filter 0.3s ease-in-out;
    }

    .modal-overlay.active {
      display: flex;
      opacity: 0;
      animation: fadeInOverlay 0.3s forwards;
    }

    .modal {
      background-color: #fff;
      padding: 20px;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      position: relative;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      animation: fadeInModal 0.3s forwards;
    }

    .modal h3 {
      margin-bottom: 15px;
      color: #333;
    }

    .modal p {
      color: #555;
      margin-bottom: 10px;
    }

    .modal .close-btn {
      position: absolute;
      top: 10px;
      right: 15px;
      background: none;
      border: none;
      font-size: 1.2em;
      cursor: pointer;
      color: #333;
    }

    /* Estiliza√ß√£o dos bot√µes no modal de reset */
    .modal .action-btn {
      padding: 10px 20px;
      font-size: 1em;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
      margin-right: 10px;
      background-color: #f44336;
      color: white;
    }

    .modal .action-btn:hover {
      background-color: #da190b;
    }

    /* Classes para ocultar elementos */
    .hidden {
      display: none;
    }
  </style>
</head>

<body>
  <!-- Sidebar Esquerda - Tabela do Servidor -->
  <div class="sidebar-left">
    <h3>Tabela do Servidor
      <button class="help-btn" onclick="openModal('server-table')">?</button>
    </h3>
    <div class="table-container">
      <table id="server-table">
        <thead>
          <tr>
            <th>Usu√°rio</th>
            <th>Hash de Senha</th>
            <th>Salt</th>
            <th>IV</th>
            <th>Dados Criptografados</th>
            <th>CED Criptografada</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="6" style="text-align: center;">Nenhum usu√°rio registrado.</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Main Content - Tutorial e Log -->
  <div class="main-content">
    <h1>Simula√ß√£o de Prote√ß√£o de Dados
      <button class="help-btn" onclick="openModal('main-title')">?</button>
    </h1>

    <!-- Diagrama de Fluxo de Dados -->
    <div class="flowchart">
      <svg viewBox="0 0 800 200" id="data-flow-diagram">
        <!-- Frontend -->
        <rect x="50" y="20" width="200" height="100" fill="#e3f2fd" stroke="#2196F3" stroke-width="2" rx="10" />
        <text x="150" y="60" text-anchor="middle" fill="#0d47a1">Frontend</text>
        <!-- Backend -->
        <rect x="550" y="20" width="200" height="100" fill="#fff3e0" stroke="#ff9800" stroke-width="2" rx="10" />
        <text x="650" y="60" text-anchor="middle" fill="#e65100">Backend</text>
        <!-- Arrow Frontend para Backend -->
        <line x1="250" y1="70" x2="550" y2="70" stroke="#757575" stroke-width="2" marker-end="url(#arrowhead)"
          id="arrow-flow" />
        <!-- Arrow Backend para Frontend -->
        <line x1="550" y1="70" x2="250" y2="70" stroke="#757575" stroke-width="2" marker-start="url(#arrowhead)"
          class="arrow-back" id="arrow-flow-back" />
        <defs>
          <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto">
            <polygon points="0 0, 10 3.5, 0 7" fill="#757575" />
          </marker>
        </defs>
        <!-- Label -->
        <text x="400" y="65" text-anchor="middle" font-size="20" fill="#757575">Fluxo de Dados</text>
      </svg>
    </div>

    <!-- Horizontal Divider para Redimensionamento do Diagrama -->
    <div class="horizontal-divider"></div>

    <!-- Container para as Etapas do Tutorial -->
    <div class="steps-container">
      <!-- Etapa 1: Definir Chave Mestra e Configura√ß√µes -->
      <div id="step-1" class="step active">
        <h2>1. Definir Chave Mestra e Configura√ß√µes
          <button class="help-btn" onclick="openModal('step-1')">?</button>
        </h2>
        <p>Defina uma chave mestra para proteger os dados dos usu√°rios e configure os intervalos de rota√ß√£o e expira√ß√£o
          dos tokens.</p>
        <form onsubmit="event.preventDefault(); setMasterKeyAndConfig();">
          <div class="form-group">
            <div class="input-column">
              <label for="master-key">Chave Mestra:
                <button class="help-btn" onclick="openModal('master-key')">?</button>
              </label>
              <input type="password" id="master-key" placeholder="Digite a chave mestra" required>
            </div>
            <div class="input-column">
              <label for="rotation-interval">Intervalo de Rota√ß√£o (s):
                <button class="help-btn" onclick="openModal('rotation-interval')">?</button>
              </label>
              <input type="number" id="rotation-interval" placeholder="Ex: 60" min="10" value="60" required>
            </div>
          </div>
          <div class="form-group">
            <div class="input-column">
              <label for="token-expiration">Dura√ß√£o do Token (s):
                <button class="help-btn" onclick="openModal('token-expiration')">?</button>
              </label>
              <input type="number" id="token-expiration" placeholder="Ex: 30" min="10" value="30" required>
            </div>
          </div>
          <button type="submit" class="action-btn">Definir Configura√ß√µes</button>
        </form>
        <p id="master-key-status"></p>
        <div class="current-master-key" id="current-master-key" style="display: none;">
          <strong>Chave Mestra Atual:</strong> <span id="display-master-key"></span>
        </div>
        <div class="navigation-buttons">
          <button class="stop-rotation-btn" onclick="stopAutoRotation()">Parar Rotatividade</button>
          <button class="next-btn" onclick="nextStep(1)" disabled id="next-btn-1">Pr√≥ximo</button>
        </div>
      </div>

      <!-- Etapa 2: Registrar Usu√°rio e Enviar Dados -->
      <div id="step-2" class="step">
        <h2>2. Registrar Usu√°rio e Enviar Dados
          <button class="help-btn" onclick="openModal('step-2')">?</button>
        </h2>
        <p>Registre um novo usu√°rio e envie dados para serem criptografados.</p>
        <form onsubmit="event.preventDefault(); registerUser();">
          <div class="form-group">
            <div class="input-column">
              <label for="reg-username">Nome de Usu√°rio:
                <button class="help-btn" onclick="openModal('reg-username')">?</button>
              </label>
              <input type="text" id="reg-username" placeholder="Digite o nome de usu√°rio" oninput="validateStep2()" required>
            </div>
            <div class="input-column">
              <label for="reg-password">Senha do Usu√°rio:
                <button class="help-btn" onclick="openModal('reg-password')">?</button>
              </label>
              <input type="password" id="reg-password" placeholder="Digite a senha do usu√°rio" oninput="validateStep2()" required>
            </div>
          </div>
          <div class="form-group">
            <div class="input-column">
              <label for="user-data">Dados para Criptografar:
                <button class="help-btn" onclick="openModal('user-data')">?</button>
              </label>
              <input type="text" id="user-data" placeholder="Digite a string para criptografar" oninput="validateStep2()" required>
            </div>
          </div>
          <button type="submit" class="action-btn">Registrar Usu√°rio</button>
        </form>
        <p id="register-status"></p>
        <div class="navigation-buttons">
          <button class="prev-btn" onclick="prevStep(2)">Anterior</button>
          <button class="next-btn" onclick="nextStep(2)" disabled id="next-btn-2">Pr√≥ximo</button>
        </div>
      </div>

      <!-- Etapa 3: Login de Usu√°rio -->
      <div id="step-3" class="step">
        <h2>3. Login de Usu√°rio
          <button class="help-btn" onclick="openModal('step-3')">?</button>
        </h2>
        <p>Fa√ßa login para gerar um token tempor√°rio e acessar seus dados criptografados.</p>
        <form onsubmit="event.preventDefault(); loginUser();">
          <div class="form-group">
            <div class="input-column">
              <label for="login-username">Nome de Usu√°rio:
                <button class="help-btn" onclick="openModal('login-username')">?</button>
              </label>
              <input type="text" id="login-username" placeholder="Digite o nome de usu√°rio" oninput="validateStep3()" required>
            </div>
            <div class="input-column">
              <label for="login-password">Senha:
                <button class="help-btn" onclick="openModal('login-password')">?</button>
              </label>
              <input type="password" id="login-password" placeholder="Digite a senha" oninput="validateStep3()" required>
            </div>
          </div>
          <button type="submit" class="action-btn">Fazer Login</button>
        </form>
        <p id="login-status"></p>
        <div class="navigation-buttons">
          <button class="prev-btn" onclick="prevStep(3)">Anterior</button>
        </div>
      </div>
    </div>

    <!-- Caixa de Log -->
    <div class="log-container">
      <h3>Log de Atividades</h3>
      <button class="action-btn" onclick="clearLog()">Limpar Logs</button>
      <div id="log"></div>
    </div>
  </div>

  <!-- Sidebar Direita - Usu√°rios Logados -->
  <div class="sidebar-right">
    <h3>Usu√°rios Logados
      <button class="help-btn" onclick="openModal('logged-users')">?</button>
    </h3>
    <div id="logged-users">
      <p class="log-header">Nenhum usu√°rio logado atualmente.</p>
    </div>
  </div>

  <!-- Bot√µes de Navega√ß√£o Flutuantes com √çcones -->
  <div class="floating-nav">
    <button onclick="navigateTo('step-1')" title="Configura√ß√µes" data-tooltip="Configura√ß√µes">‚öôÔ∏è</button>
    <button onclick="navigateTo('step-2')" title="Registrar Novo Usu√°rio" data-tooltip="Registrar Usu√°rio">üë§</button>
    <button onclick="navigateTo('step-3')" title="Login" data-tooltip="Login">üîí</button>
    <button onclick="resetAll()" title="Reset Completo" data-tooltip="Resetar Tutorial">üîÑ</button>
  </div>

  <!-- Notifica√ß√£o Pop-up -->
  <div id="notification" class="notification"></div>

  <!-- Janela Modal -->
  <div id="modal-overlay" class="modal-overlay">
    <div class="modal">
      <button class="close-btn" onclick="closeModal()">‚úñÔ∏è</button>
      <h3 id="modal-title">Ajuda</h3>
      <p id="modal-content">Conte√∫do da ajuda...</p>
    </div>
  </div>

  <!-- Scripts JavaScript -->
  <script>
    let currentStep = 1;
    const totalSteps = 3;
    let masterKey = null;
    const userDB = {};
    let autoRotationInterval = null;
    let rotationIntervalTime = 60000; // 60 segundos padr√£o
    let tokenExpiryInterval = 30000; // 30 segundos padr√£o
    const tokens = {};

    /**
     * Abre a janela modal com o conte√∫do espec√≠fico.
     * @param {string} context - O contexto da ajuda ('step-1', 'master-key', etc.).
     */
    function openModal(context) {
      const modalOverlay = document.getElementById('modal-overlay');
      const modalTitle = document.getElementById('modal-title');
      const modalContent = document.getElementById('modal-content');

      let title = 'Ajuda';
      let content = 'Informa√ß√£o de ajuda n√£o dispon√≠vel.';

      switch (context) {
        case 'step-1':
          title = 'Configura√ß√µes Iniciais';
          content = 'Nesta tela, voc√™ define a chave mestra que proteger√° os dados dos usu√°rios. Configure tamb√©m os intervalos de rota√ß√£o da chave mestra e a dura√ß√£o dos tokens de usu√°rio.';
          break;
        case 'master-key':
          title = 'Rota√ß√£o da KeyMaster';
          content = 'Defina a chave mestra que ser√° usada para criptografar os dados dos usu√°rios. Esta chave deve ser forte e segura.';
          break;
        case 'rotation-interval':
          title = 'Intervalo de Rota√ß√£o';
          content = 'Defina o intervalo de tempo (em segundos) ap√≥s o qual a chave mestra ser√° automaticamente rotacionada para aumentar a seguran√ßa.';
          break;
        case 'token-expiration':
          title = 'Dura√ß√£o do Token';
          content = 'Defina o tempo (em segundos) de validade dos tokens de usu√°rio. Tokens expirados exigem que o usu√°rio fa√ßa login novamente.';
          break;
        case 'step-2':
          title = 'Registrar Usu√°rio';
          content = 'Nesta etapa, voc√™ pode registrar um novo usu√°rio fornecendo um nome de usu√°rio, senha e os dados que deseja criptografar.';
          break;
        case 'reg-username':
          title = 'Nome de Usu√°rio';
          content = 'Digite um nome de usu√°rio √∫nico para o novo usu√°rio. Este ser√° usado para realizar login no sistema.';
          break;
        case 'reg-password':
          title = 'Senha do Usu√°rio';
          content = 'Digite uma senha segura para o usu√°rio. A senha deve ter pelo menos 8 caracteres.';
          break;
        case 'user-data':
          title = 'Dados para Criptografar';
          content = 'Insira os dados que ser√£o criptografados e armazenados de forma segura no sistema.';
          break;
        case 'step-3':
          title = 'Login de Usu√°rio';
          content = 'Fa√ßa login com seu nome de usu√°rio e senha para gerar um token tempor√°rio que permitir√° acessar seus dados criptografados.';
          break;
        case 'login-username':
          title = 'Nome de Usu√°rio';
          content = 'Digite seu nome de usu√°rio para realizar o login.';
          break;
        case 'login-password':
          title = 'Senha';
          content = 'Digite sua senha para autenticar e gerar um token de acesso tempor√°rio.';
          break;
        case 'server-table':
          title = 'Tabela do Servidor';
          content = 'Aqui est√£o listados todos os usu√°rios registrados e seus respectivos detalhes de criptografia, como hash de senha, salt, IV, dados criptografados e CED criptografada.';
          break;
        case 'logged-users':
          title = 'Usu√°rios Logados';
          content = 'Veja a lista de usu√°rios atualmente logados no sistema, juntamente com os tokens gerados e a dura√ß√£o restante dos tokens.';
          break;
        case 'main-title':
          title = 'Simula√ß√£o de Prote√ß√£o de Dados';
          content = 'Esta aplica√ß√£o simula um sistema de prote√ß√£o de dados, permitindo registrar usu√°rios, criptografar dados, gerenciar tokens e rotacionar chaves mestras automaticamente para garantir a seguran√ßa dos dados.';
          break;
        case 'reset-complete':
          title = 'Confirmar Reset Completo';
          content = `
              <p>Tem certeza que deseja resetar tudo? Isso ir√° limpar todos os dados e logs.</p>
              <button class="action-btn" onclick="confirmReset()">Sim, Resetar</button>
          `;
          break;
        default:
          title = 'Ajuda';
          content = 'Informa√ß√£o de ajuda n√£o dispon√≠vel.';
      }

      modalTitle.textContent = title;
      modalContent.innerHTML = context === 'reset-complete' ? content : content;
      modalOverlay.classList.add('active');
    }

    /**
     * Fecha a janela modal com transi√ß√£o suave.
     */
    function closeModal() {
      const modalOverlay = document.getElementById('modal-overlay');
      const modal = document.querySelector('.modal');
      modal.classList.add('fadeOutModal');
      modalOverlay.classList.add('fadeOutOverlay');

      // Ap√≥s a anima√ß√£o, remove as classes
      setTimeout(() => {
        modal.classList.remove('active', 'fadeOutModal');
        modalOverlay.classList.remove('active', 'fadeOutOverlay');
      }, 500); // Tempo da anima√ß√£o em segundos
    }

    /**
     * Exibe uma notifica√ß√£o pop-up.
     * @param {string} message - A mensagem da notifica√ß√£o.
     * @param {string} type - Tipo da mensagem: 'success', 'error', 'info', 'critical'.
     */
    function showNotification(message, type) {
      const notification = document.getElementById('notification');
      notification.textContent = message;
      notification.className = `notification show ${type}`;
      setTimeout(() => {
        notification.className = 'notification';
      }, 3000);
    }

    /**
     * Adiciona uma mensagem ao log com timestamp e coloriza√ß√£o.
     * @param {string} message - A mensagem a ser adicionada.
     * @param {string} type - Tipo da mensagem: 'success', 'error', 'info', 'critical'.
     */
    function logMessage(message, type = 'info') {
      const logDiv = document.getElementById('log');
      const timestamp = new Date().toLocaleTimeString();
      let color = '';
      if (type === 'success') color = 'green';
      else if (type === 'error') color = 'red';
      else if (type === 'critical') color = '#FF5722'; // Laranja para opera√ß√µes cr√≠ticas
      else color = '#555';
      logDiv.innerHTML += `<p style="color: ${color};"><strong>[${timestamp}]</strong> ${message}</p>`;
      logDiv.scrollTop = logDiv.scrollHeight;

      // Exibe notifica√ß√£o
      showNotification(message, type);
    }

    /**
     * Limpa o conte√∫do do log.
     */
    function clearLog() {
      document.getElementById('log').innerHTML = "";
      logMessage("Logs limpos pelo usu√°rio.", 'info');
    }

    /**
     * Atualiza a lista de usu√°rios logados.
     */
    function updateLoggedUsers() {
      const loggedUsersDiv = document.getElementById('logged-users');
      const users = Object.keys(tokens);
      if (users.length === 0) {
        loggedUsersDiv.innerHTML = '<p class="log-header">Nenhum usu√°rio logado atualmente.</p>';
      } else {
        loggedUsersDiv.innerHTML = ''; // Limpa o conte√∫do anterior
        const colorClasses = ['color-1', 'color-2', 'color-3', 'color-4'];
        let colorIndex = 0;
        users.forEach(username => {
          const userToken = tokens[username];
          const isLoggedIn = userToken && Date.now() < userToken.expires;
          if (isLoggedIn) {
            const remaining = Math.round((userToken.expires - Date.now()) / 1000);
            const colorClass = colorClasses[colorIndex % colorClasses.length];
            colorIndex++;
            const decryptedData = userToken.data || 'Nenhum dado descriptografado.';
            loggedUsersDiv.innerHTML += `
              <div class="user-block ${colorClass}">
  <!-- Container para nome do usu√°rio e status -->
  <div class="user-header">
    <strong>${username}</strong>
    <span class="status-indicator status-logged-in"></span>
  </div>
  
  <strong>Dados Descriptografados:</strong> ${decryptedData}
  
  <!-- Container para "Expira em:" e o tempo -->
  <div class="expires">
    <strong>Expira em:</strong> <span class="timer">${remaining}s</span>
  </div>
  
  <strong>Token:</strong> <span style="word-break: break-all;">${userToken.token}</span>
  <button class="action-btn" onclick="logoutUser('${username}')">Logout</button>
</div>


            `;
          }
        });
      }
    }

    /**
     * Atualiza a tabela simulada do servidor.
     */
    function updateServerTable() {
      const tableBody = document.querySelector('#server-table tbody');
      tableBody.innerHTML = ''; // Limpa a tabela

      const users = Object.keys(userDB);
      if (users.length === 0) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="6" style="text-align: center;">Nenhum usu√°rio registrado.</td>
          </tr>
        `;
        return;
      }

      users.forEach(username => {
        const user = userDB[username];
        tableBody.innerHTML += `
          <tr>
            <td>${username}</td>
            <td>${user.passwordHash.join('')}</td>
            <td>${user.salt.join(',')}</td>
            <td>${user.iv.join(',')}</td>
            <td>${user.encryptedData.join(',')}</td>
            <td>${user.encryptedCED.join(',')}</td>
          </tr>
        `;
      });
    }

    /**
     * Define a chave mestra e configura√ß√µes a partir do input do usu√°rio.
     */
    async function setMasterKeyAndConfig() {
      const masterKeyInput = document.getElementById('master-key').value;
      const rotationIntervalInput = parseInt(document.getElementById('rotation-interval').value, 10) * 1000; // Convertendo para ms
      const tokenExpirationInput = parseInt(document.getElementById('token-expiration').value, 10) * 1000; // Convertendo para ms
      const statusElement = document.getElementById("master-key-status");
      statusElement.className = ''; // Resetar classes

      if (!masterKeyInput) {
        logMessage("Erro: Chave mestra n√£o fornecida.", 'error');
        statusElement.textContent = "Erro: Chave mestra n√£o fornecida.";
        statusElement.classList.add('status-error');
        return;
      }

      try {
        const keyMaterial = new TextEncoder().encode(masterKeyInput);
        const hashBuffer = await crypto.subtle.digest("SHA-256", keyMaterial);
        masterKey = await crypto.subtle.importKey("raw", hashBuffer, "AES-GCM", false, ["encrypt", "decrypt"]);
        logMessage("Chave mestra definida com sucesso.", 'success');
        statusElement.textContent = "Chave mestra definida com sucesso.";
        statusElement.classList.add('status-success');
        document.getElementById("next-btn-1").disabled = false;

        // Atualiza a Tabela do Servidor (poderia adicionar informa√ß√µes sobre a chave mestra, se necess√°rio)
        updateServerTable();

        // Exibe a chave mestra na se√ß√£o atual
        document.getElementById('current-master-key').style.display = 'block';
        document.getElementById('display-master-key').textContent = masterKeyInput;

        // Configura os intervalos
        rotationIntervalTime = rotationIntervalInput;
        tokenExpiryInterval = tokenExpirationInput;

        logMessage(`Configura√ß√£o de rota√ß√£o autom√°tica definida para ${rotationIntervalTime / 1000} segundos.`, 'info');
        logMessage(`Configura√ß√£o de expira√ß√£o de token definida para ${tokenExpiryInterval / 1000} segundos.`, 'info');

        // Inicia a rota√ß√£o autom√°tica
        startAutoRotation();

        // Destaque no diagrama
        highlightDiagram('masterKey');
      } catch (error) {
        logMessage("Erro ao definir a chave mestra: " + error.message, 'error');
        statusElement.textContent = "Erro ao definir a chave mestra.";
        statusElement.classList.add('status-error');
      }
    }

    /**
     * Gera o hash da senha utilizando PBKDF2.
     * @param {string} password - A senha a ser hasheada.
     * @param {Uint8Array} salt - O sal a ser utilizado.
     * @returns {Object} - Cont√©m o hash e o salt.
     */
    async function generatePasswordHash(password, salt = null) {
      const encoder = new TextEncoder();
      if (!salt) salt = crypto.getRandomValues(new Uint8Array(16));
      const keyMaterial = await crypto.subtle.importKey("raw", encoder.encode(password), { name: "PBKDF2" }, false, ["deriveBits"]);
      const derivedBits = await crypto.subtle.deriveBits({ name: "PBKDF2", salt: salt, iterations: 100000, hash: "SHA-256" }, keyMaterial, 256);
      return { hash: derivedBits, salt: Array.from(salt) };
    }

    /**
     * Valida√ß√£o da Etapa 1: Definir Chave Mestra e Configura√ß√µes
     */
    function validateStep1() {
      // N√£o altera o estado aqui; habilita√ß√£o ocorre ap√≥s defini√ß√£o bem-sucedida
    }

    /**
     * Valida√ß√£o da Etapa 2: Registrar Usu√°rio e Enviar Dados
     */
    function validateStep2() {
      // N√£o altera o estado aqui; habilita√ß√£o ocorre ap√≥s registro bem-sucedido
    }

    /**
     * Valida√ß√£o da Etapa 3: Login de Usu√°rio
     */
    function validateStep3() {
      // N√£o altera o estado aqui; habilita√ß√£o ocorre ap√≥s login bem-sucedido
    }

    /**
     * Registra um novo usu√°rio e criptografa seus dados.
     */
    async function registerUser() {
      const username = document.getElementById('reg-username').value.trim();
      const password = document.getElementById('reg-password').value;
      const userData = document.getElementById('user-data').value.trim();
      const statusElement = document.getElementById("register-status");
      statusElement.className = ''; // Resetar classes

      // Valida√ß√£o dos campos
      if (!username) {
        logMessage("Erro: Nome de usu√°rio n√£o fornecido.", 'error');
        statusElement.textContent = "Erro: Nome de usu√°rio n√£o fornecido.";
        statusElement.classList.add('status-error');
        return;
      }
      if (password.length < 8) {
        logMessage("Erro: A senha deve ter pelo menos 8 caracteres.", 'error');
        statusElement.textContent = "Erro: A senha deve ter pelo menos 8 caracteres.";
        statusElement.classList.add('status-error');
        return;
      }
      if (!userData) {
        logMessage("Erro: Dados do usu√°rio n√£o fornecidos.", 'error');
        statusElement.textContent = "Erro: Dados do usu√°rio n√£o fornecidos.";
        statusElement.classList.add('status-error');
        return;
      }

      if (userDB[username]) {
        logMessage(`Erro: O usu√°rio "${username}" j√° est√° registrado.`, 'error');
        statusElement.textContent = `Erro: O usu√°rio "${username}" j√° est√° registrado.`;
        statusElement.classList.add('status-error');
        return;
      }

      try {
        const { hash: passwordHash, salt } = await generatePasswordHash(password);

        const userCED = crypto.getRandomValues(new Uint8Array(32));
        logMessage(`CED gerada para o usu√°rio "${username}": ${Array.from(userCED).toString()}`, 'info');

        const iv = crypto.getRandomValues(new Uint8Array(12));
        const cedKey = await crypto.subtle.importKey("raw", userCED, "AES-GCM", false, ["encrypt", "decrypt"]);
        const encryptedData = await crypto.subtle.encrypt({ name: "AES-GCM", iv: iv }, cedKey, new TextEncoder().encode(userData));
        logMessage(`Dados do usu√°rio "${username}" criptografados com a CED no backend: ${Array.from(new Uint8Array(encryptedData)).toString()}`, 'info');

        const encryptedCED = await crypto.subtle.encrypt({ name: "AES-GCM", iv: iv }, masterKey, userCED);
        logMessage(`CED criptografada para o usu√°rio "${username}": ${Array.from(new Uint8Array(encryptedCED)).toString()}`, 'info');

        userDB[username] = {
          salt,
          passwordHash: Array.from(new Uint8Array(passwordHash)),
          iv: Array.from(iv),
          encryptedData: Array.from(new Uint8Array(encryptedData)),
          encryptedCED: Array.from(new Uint8Array(encryptedCED))
        };

        logMessage(`Usu√°rio "${username}" registrado com sucesso.`, 'success');
        statusElement.textContent = `Usu√°rio "${username}" registrado com sucesso.`;
        statusElement.classList.add('status-success');

        // Atualiza a tabela do servidor
        updateServerTable();

        // Habilita o pr√≥ximo bot√£o
        document.getElementById("next-btn-2").disabled = false;

        // Exibir tooltip de finaliza√ß√£o
        showTooltip();

        // Destaque no diagrama
        highlightDiagram('registerUser');

      } catch (error) {
        logMessage("Erro ao registrar o usu√°rio: " + error.message, 'error');
        statusElement.textContent = "Erro ao registrar o usu√°rio.";
        statusElement.classList.add('status-error');
      }
    }

    /**
     * Exibe um tooltip indicando que o usu√°rio pode finalizar o tutorial.
     */
    function showTooltip() {
      // Cria o tooltip
      const tooltip = document.createElement('div');
      tooltip.style.position = 'fixed';
      tooltip.style.bottom = '20px';
      tooltip.style.right = '80px';
      tooltip.style.backgroundColor = '#333';
      tooltip.style.color = '#fff';
      tooltip.style.padding = '10px 20px';
      tooltip.style.borderRadius = '5px';
      tooltip.style.boxShadow = '0 0 10px rgba(0,0,0,0.2)';
      tooltip.style.zIndex = '3000';
      tooltip.style.opacity = '0';
      tooltip.style.transition = 'opacity 0.3s';
      tooltip.textContent = 'Clique no bot√£o ‚öôÔ∏è para finalizar o tutorial.';
      document.body.appendChild(tooltip);

      // Exibe o tooltip
      setTimeout(() => {
        tooltip.style.opacity = '1';
      }, 100);

      // Remove o tooltip ap√≥s 5 segundos
      setTimeout(() => {
        tooltip.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(tooltip);
        }, 300);
      }, 5000);
    }

    /**
     * Realiza o login do usu√°rio e gera um token tempor√°rio.
     */
    async function loginUser() {
      const username = document.getElementById('login-username').value.trim();
      const password = document.getElementById('login-password').value;
      const statusElement = document.getElementById("login-status");
      statusElement.className = ''; // Resetar classes

      if (!username || !password) {
        logMessage("Erro: Nome de usu√°rio ou senha n√£o fornecidos.", 'error');
        statusElement.textContent = "Erro: Nome de usu√°rio ou senha n√£o fornecidos.";
        statusElement.classList.add('status-error');
        return;
      }

      const user = userDB[username];
      if (!user) {
        logMessage("Erro: Usu√°rio n√£o encontrado.", 'error');
        statusElement.textContent = "Erro: Usu√°rio n√£o encontrado.";
        statusElement.classList.add('status-error');
        return;
      }

      try {
        const { salt, passwordHash } = user;
        const { hash: loginHash } = await generatePasswordHash(password, new Uint8Array(salt));
        if (Array.from(new Uint8Array(loginHash)).toString() !== passwordHash.toString()) {
          logMessage("Erro: Senha incorreta.", 'error');
          statusElement.textContent = "Erro: Senha incorreta.";
          statusElement.classList.add('status-error');
          return;
        }

        const token = crypto.getRandomValues(new Uint8Array(16)).join("");
        tokens[username] = { token, expires: Date.now() + tokenExpiryInterval };
        logMessage(`Login bem-sucedido. Token gerado para o usu√°rio "${username}": ${token}`, 'success');
        statusElement.textContent = `Login bem-sucedido. Token gerado para "${username}".`;
        statusElement.classList.add('status-success');

        setTimeout(() => checkTokenExpiry(username), tokenExpiryInterval);
        // Remover interval j√° existente para evitar m√∫ltiplos intervals
        if (!autoRotationInterval) {
          autoRotationInterval = setInterval(() => updateLoggedUsers(), 1000); // Atualiza o temporizador a cada segundo
        }

        const decryptedCED = await crypto.subtle.decrypt({ name: "AES-GCM", iv: new Uint8Array(user.iv) }, masterKey, new Uint8Array(user.encryptedCED));
        const cedKey = await crypto.subtle.importKey("raw", decryptedCED, "AES-GCM", false, ["decrypt"]);
        const decryptedData = await crypto.subtle.decrypt({ name: "AES-GCM", iv: new Uint8Array(user.iv) }, cedKey, new Uint8Array(user.encryptedData));

        tokens[username].data = new TextDecoder().decode(decryptedData);
        updateLoggedUsers();
        logMessage(`Dados descriptografados para o usu√°rio "${username}": ${tokens[username].data}`, 'info');

        // Exibir o token no log tamb√©m
        logMessage(`Token gerado para o usu√°rio "${username}": ${token}`, 'info');

        // Destaque no diagrama
        highlightDiagram('loginUser');

      } catch (error) {
        logMessage("Erro ao realizar o login: " + error.message, 'error');
        statusElement.textContent = "Erro ao realizar o login.";
        statusElement.classList.add('status-error');
      }
    }

    /**
     * Desloga o usu√°rio.
     * @param {string} username - O nome do usu√°rio a ser deslogado.
     */
    function logoutUser(username) {
      if (tokens[username]) {
        delete tokens[username];
        logMessage(`Usu√°rio "${username}" deslogado.`, 'info');
        updateLoggedUsers();
      } else {
        logMessage(`Usu√°rio "${username}" n√£o est√° logado.`, 'error');
      }
    }

    /**
     * Inicia a rota√ß√£o autom√°tica da chave mestra.
     */
    function startAutoRotation() {
      if (autoRotationInterval) {
        logMessage("Rota√ß√£o autom√°tica j√° est√° em execu√ß√£o.", 'error');
        return;
      }
      autoRotationInterval = setInterval(rotateMasterKey, rotationIntervalTime);
      logMessage(`Rota√ß√£o autom√°tica iniciada (a cada ${rotationIntervalTime / 1000} segundos).`, 'success');

      // Destaque no diagrama
      highlightDiagram('autoRotation');
    }

    /**
     * Para a rota√ß√£o autom√°tica da chave mestra.
     */
    function stopAutoRotation() {
      if (autoRotationInterval) {
        clearInterval(autoRotationInterval);
        autoRotationInterval = null;
        logMessage("Rota√ß√£o autom√°tica parada.", 'info');
      } else {
        logMessage("Rota√ß√£o autom√°tica n√£o est√° em execu√ß√£o.", 'error');
      }
    }

    /**
     * Realiza a rota√ß√£o da chave mestra e recriptografa as CEDs dos usu√°rios.
     */
    async function rotateMasterKey() {
      const newMasterKeyInput = crypto.getRandomValues(new Uint8Array(16)).join("");
      try {
        const keyMaterial = new TextEncoder().encode(newMasterKeyInput);
        const hashBuffer = await crypto.subtle.digest("SHA-256", keyMaterial);

        const newMasterKey = await crypto.subtle.importKey("raw", hashBuffer, "AES-GCM", false, ["encrypt", "decrypt"]);

        logMessage("Iniciando a rota√ß√£o da chave mestra...", 'critical');

        for (const username in userDB) {
          const user = userDB[username];
          logMessage(`CED criptografada com a chave antiga para o usu√°rio "${username}": ${user.encryptedCED.toString()}`, 'info');
          const decryptedCED = await crypto.subtle.decrypt({ name: "AES-GCM", iv: new Uint8Array(user.iv) }, masterKey, new Uint8Array(user.encryptedCED));

          const reencryptedCED = await crypto.subtle.encrypt({ name: "AES-GCM", iv: new Uint8Array(user.iv) }, newMasterKey, decryptedCED);
          userDB[username].encryptedCED = Array.from(new Uint8Array(reencryptedCED));
          logMessage(`CED recriptografada com a nova chave para o usu√°rio "${username}": ${Array.from(new Uint8Array(reencryptedCED)).toString()}`, 'info');
        }

        masterKey = newMasterKey;
        logMessage("Rota√ß√£o da chave mestra conclu√≠da com sucesso.", 'success');

        // Atualiza a tabela do servidor ap√≥s rota√ß√£o
        updateServerTable();

        // Exibe a nova chave mestra na se√ß√£o de configura√ß√µes
        document.getElementById('display-master-key').textContent = newMasterKeyInput;

        // Destaque no diagrama
        highlightDiagram('rotateMasterKey');

      } catch (error) {
        logMessage("Erro ao rotacionar a chave mestra: " + error.message, 'error');
      }
    }

    /**
     * Verifica se o token do usu√°rio expirou.
     * @param {string} username - O nome do usu√°rio.
     */
    function checkTokenExpiry(username) {
      const userToken = tokens[username];
      if (userToken && Date.now() > userToken.expires) {
        logMessage(`Token para o usu√°rio "${username}" expirou.`, 'info');
        delete tokens[username];
        updateLoggedUsers();
      }
    }

    /**
     * Navega√ß√£o do Tutorial
     */
    function nextStep(current) {
      if (current === 1 && masterKey) {
        showStep(2);
      }
      if (current === 2 && userDB.hasOwnProperty(document.getElementById('reg-username').value.trim())) {
        showStep(3);
      }
      if (current === 3 && tokens.hasOwnProperty(document.getElementById('login-username').value.trim())) {
        // Tooltip j√° exibido ap√≥s registro, finalize com bot√£o flutuante
        // Habilita√ß√£o do bot√£o Finalizar removida
      }
    }

    function prevStep(current) {
      if (current === 2) {
        showStep(1);
      }
      if (current === 3) {
        showStep(2);
      }
    }

    function showStep(step) {
      for (let i = 1; i <= totalSteps; i++) {
        const stepElement = document.getElementById(`step-${i}`);
        if (stepElement) {
          stepElement.classList.remove('active');
        }
      }
      if (step <= totalSteps) {
        const stepElement = document.getElementById(`step-${step}`);
        if (stepElement) {
          stepElement.classList.add('active');
          currentStep = step;
        }
      }

      // Ajuste das setas no diagrama
      adjustDiagramArrows(step);
    }

    /**
     * Ajusta as setas do diagrama com base na etapa atual.
     * @param {number} step - A etapa atual.
     */
    function adjustDiagramArrows(step) {
      const arrowBack = document.getElementById('arrow-flow-back');
      if (step === 3) { // Durante o login, mostrar seta de Backend para Frontend
        arrowBack.classList.add('highlight');
      } else {
        arrowBack.classList.remove('highlight');
      }
    }

    /**
     * Finaliza o tutorial e exibe a vis√£o geral do backend.
     */
    function finishTutorial() {
      // Remover todas as etapas ativas
      document.querySelectorAll('.step').forEach(step => step.classList.remove('active'));
      logMessage("Tutorial conclu√≠do. Vis√£o geral do backend exibida.", 'info');

      // Implementar fun√ß√£o de finaliza√ß√£o, como exibir um resumo ou reiniciar o tutorial
      // Por exemplo, exibir um alerta confirmando a conclus√£o
      alert("Tutorial conclu√≠do com sucesso!");

      // Opcional: Reiniciar o tutorial ap√≥s finaliza√ß√£o
      resetTutorial();
    }

    /**
     * Reinicia o tutorial, limpando todos os dados e retornando para a primeira etapa.
     */
    function resetTutorial() {
      // Limpar dados do usu√°rio
      for (const username in userDB) {
        delete userDB[username];
      }
      // Limpar tokens
      for (const username in tokens) {
        delete tokens[username];
      }
      // Limpar tabela do servidor
      updateServerTable();
      // Limpar log
      clearLog();
      // Atualizar usu√°rios logados
      updateLoggedUsers();
      // Resetar masterKey
      masterKey = null;
      // Resetar etapas
      showStep(1);
      // Habilitar novamente os bot√µes de navega√ß√£o linear
      showNavigationButtons();
      // Desabilitar bot√µes de pr√≥ximo
      document.getElementById("next-btn-1").disabled = true;
      document.getElementById("next-btn-2").disabled = true;
      // Resetar campos de entrada
      document.getElementById('master-key').value = '';
      document.getElementById('reg-username').value = '';
      document.getElementById('reg-password').value = '';
      document.getElementById('user-data').value = '';
      document.getElementById('login-username').value = '';
      document.getElementById('login-password').value = '';
      document.getElementById('rotation-interval').value = '60';
      document.getElementById('token-expiration').value = '30';
      document.getElementById('current-master-key').style.display = 'none';
      document.getElementById('display-master-key').textContent = '';
      // Remover qualquer rota√ß√£o autom√°tica ativa
      if (autoRotationInterval) {
        clearInterval(autoRotationInterval);
        autoRotationInterval = null;
      }
      // Remover destaques no diagrama
      removeHighlights();
      logMessage("Tutorial reiniciado pelo usu√°rio.", 'info');
    }

    /**
     * Destaca uma parte espec√≠fica do diagrama.
     * @param {string} action - A a√ß√£o que desencadeia o destaque.
     */
    function highlightDiagram(action) {
      const arrow = document.getElementById('arrow-flow');
      const arrowBack = document.getElementById('arrow-flow-back');
      switch (action) {
        case 'masterKey':
          arrow.classList.add('highlight');
          setTimeout(() => arrow.classList.remove('highlight'), 2000);
          break;
        case 'registerUser':
          arrow.classList.add('highlight');
          setTimeout(() => arrow.classList.remove('highlight'), 2000);
          break;
        case 'loginUser':
          arrowBack.classList.add('highlight');
          setTimeout(() => arrowBack.classList.remove('highlight'), 2000);
          break;
        case 'autoRotation':
          arrow.classList.add('highlight');
          setTimeout(() => arrow.classList.remove('highlight'), 2000);
          break;
        case 'rotateMasterKey':
          arrow.classList.add('highlight');
          setTimeout(() => arrow.classList.remove('highlight'), 2000);
          break;
        case 'overview':
          arrow.classList.remove('highlight');
          arrowBack.classList.remove('highlight');
          break;
        default:
          break;
      }
    }

    /**
     * Remove todos os destaques no diagrama.
     */
    function removeHighlights() {
      const arrow = document.getElementById('arrow-flow');
      const arrowBack = document.getElementById('arrow-flow-back');
      arrow.classList.remove('highlight');
      arrowBack.classList.remove('highlight');
    }

    /**
     * Atualiza os temporizadores de expira√ß√£o de token a cada segundo.
     */
    setInterval(() => {
      const users = Object.keys(tokens);
      users.forEach(username => {
        const userToken = tokens[username];
        if (userToken && Date.now() < userToken.expires) {
          const remaining = Math.round((userToken.expires - Date.now()) / 1000);
          // Atualiza o temporizador na sidebar direita
          const loggedUsersDiv = document.getElementById('logged-users');
          const userEntries = loggedUsersDiv.getElementsByClassName('user-block');
          for (let card of userEntries) {
            if (card.querySelector('strong') && card.querySelector('strong').textContent === username) {
              const timerSpan = card.querySelector('.timer');
              if (timerSpan) {
                timerSpan.textContent = `${remaining}s`;
              }
            }
          }
        }
      });
    }, 1000);

    /**
     * Fun√ß√£o para navegar diretamente para uma etapa espec√≠fica.
     * @param {string} stepId - O ID da etapa para navegar.
     */
    function navigateTo(stepId) {
      const stepNumber = stepId.split('-')[1];
      showStep(parseInt(stepNumber));
    }

    /**
     * Fun√ß√£o para resetar tudo (dados, logs, etc.).
     */
    function resetAll() {
      openResetModal();
    }

    /**
     * Abre o modal de confirma√ß√£o de reset.
     */
    function openResetModal() {
      const modalOverlay = document.getElementById('modal-overlay');
      const modalTitle = document.getElementById('modal-title');
      const modalContent = document.getElementById('modal-content');

      modalTitle.textContent = 'Confirmar Reset Completo';
      modalContent.innerHTML = `
          <p>Tem certeza que deseja resetar tudo? Isso ir√° limpar todos os dados e logs.</p>
          <button class="action-btn" onclick="confirmReset()">Sim, Resetar</button>
      `;
      modalOverlay.classList.add('active');
    }

    /**
     * Fun√ß√£o para resetar tudo ap√≥s confirma√ß√£o no modal.
     */
    function confirmReset() {
      resetTutorial();
      logMessage("Todas as configura√ß√µes e dados foram resetados.", 'info');
      closeModal();
    }

    /**
     * Fun√ß√£o para esconder os bot√µes de navega√ß√£o linear ap√≥s a configura√ß√£o.
     */
    function hideNavigationButtons() {
      document.querySelectorAll('.navigation-buttons').forEach(nav => {
        nav.style.display = 'none';
      });
    }

    /**
     * Fun√ß√£o para mostrar os bot√µes de navega√ß√£o linear ao reiniciar o tutorial.
     */
    function showNavigationButtons() {
      document.querySelectorAll('.navigation-buttons').forEach(nav => {
        nav.style.display = 'flex';
      });
    }

    /**
     * Adiciona eventos de redimensionamento para a linha horizontal.
     */
    const horizontalDivider = document.querySelector('.horizontal-divider');
    const flowchart = document.querySelector('.flowchart');
    let isResizing = false;
    let startY;
    let startHeight;

    horizontalDivider.addEventListener('mousedown', function (e) {
      isResizing = true;
      startY = e.clientY;
      const flowchartRect = flowchart.getBoundingClientRect();
      startHeight = flowchartRect.height;
      document.body.style.cursor = 'ns-resize';
      document.body.style.userSelect = 'none';
    });

    window.addEventListener('mousemove', function (e) {
      if (!isResizing) return;
      const dy = e.clientY - startY;
      let newHeight = startHeight + dy;
      // Set minimum and maximum heights
      const minHeight = 100; // pixels
      const maxHeight = window.innerHeight - 300; // arbitrary max
      if (newHeight < minHeight) newHeight = minHeight;
      if (newHeight > maxHeight) newHeight = maxHeight;
      flowchart.style.height = `${newHeight}px`;
    });

    window.addEventListener('mouseup', function (e) {
      if (isResizing) {
        isResizing = false;
        document.body.style.cursor = 'default';
        document.body.style.userSelect = 'auto';
      }
    });

    /**
     * Inicializa√ß√£o das funcionalidades ap√≥s o carregamento da p√°gina
     */
    window.onload = () => {
      // Resizing the flowchart area with the horizontal divider is already handled above
      // Outras funcionalidades podem ser inicializadas aqui, se necess√°rio
    };
  </script>
</body>

</html>
